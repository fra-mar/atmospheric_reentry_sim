#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 23 09:54:32 2021

@author: paco
"""

'''testing linear transformatons, according to 3eyeBlue video series linear algebra
https://www.youtube.com/watch?v=rHLEWRxRGiM

I went crazy with ...transformation_3...so next try,simplified

No rotation, just linear trasnformation of z_unitary vector after a given 3D vector
'''

from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np

#%% unitary vectors

x_u= np.array( [[1,0,0]])

y_u = np.array( [[0,1,0]])

z_u = np.array( [[0,0,1]])

new_x= np.array( [[0.71,0,0.71]])

new_y= np.array( [[0,1,0]])

new_z  = np.array( [[-0.71,0,0.71]])

to_transform = np.array( [ [6,6,2] ])  #transforming vector

#%% transformaton matrix and output vector
t_matrix = np.array([[new_x[0][0], new_y[0][0], new_z[0][0]],
                     [new_x[0][1], new_y[0][1], new_z[0][1]],
                     [new_x[0][2], new_y[0][2], new_z[0][2]] ])

transformed  = np.matmul(t_matrix,to_transform.T).reshape((1,3))






#%% plotting

vectors = [(x_u,'black'),(y_u,'black'),(z_u,'black'),(new_z,'blue'),
           (new_x,'blue'),(new_y,'blue'), (to_transform, 'yellow'), (transformed ,'red')]

fig = plt.figure ( 'testing linear transformation')
ax = plt.axes(projection = '3d')

for vv,cc in vectors:
    print (vv)
    ax.scatter(0,0,0, color = 'b')
    ax.quiver(0,0,0,vv[0][0],vv[0][1],vv[0][2] , color = cc,  length = 1)

ax.scatter (x_u*4, y_u*4, z_u *4) #points to have a reference
ax.view_init(10,10)              #change the point of view (angle above x_ais, rotation angle from z_axis)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()





