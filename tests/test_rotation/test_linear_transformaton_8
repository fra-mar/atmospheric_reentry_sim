#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 23 09:54:32 2021

@author: paco
"""

'''testing linear transformatons, according to 3eyeBlue video series linear algebra
https://www.youtube.com/watch?v=rHLEWRxRGiM

This is transformation_7 but animating vectors
... you want to transform (v_o into v_o_rot)

This script used as the formers linear transformation to calculate the rotation of all 3 axis according to the displacement
of vel_after vector respect vel_init vector.

The thing is that it became a kaos when the vector crossed cuadrants and even more caos to understand the sign of the angles
when angles between vectors were calculated.
So at last I found out that a lift vector can be calculated as cross product of vel_init x after (cross) and then cross product again
of cross x vel_after. To rotate the lift vecto around the velocity vector (let's say vel_after a brilliant formula can be
used -Rodriges formula-)

So most of this code and of the 6 former scripts are of no use to my project but...I've learned a lot...that soon I'll forget...

'''

from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np


#%% lambdas and functions
to_rad = lambda d: np.pi*d / 180
to_deg = lambda r: r*180/np.pi
module = lambda v: np.sqrt( np.sum(v**2))
v_unitary = lambda v: v/module(v)

def find_angle(v1,v2):
    modules_product = module(v1)*module(v2)
    dot_product =  np.dot(v1[0],v2[0])
    '''print (v1,v2)
    print (dot_product)
    print (modules_product)'''
    
    if modules_product > 1e-15:#  and dot_product >1e-15:
        angle = np.arccos( dot_product / modules_product  )
    else:
        angle = 0.0
        print ('oooops')
    angle = np.arccos( dot_product / modules_product  )
    return angle

def xyz_components(v):
    v_x = np.array( [ [v[0][0], 1e-4,1e-4]])
    v_y = np.array( [ [ 1e-4, v[0][1], 1e-4]] )
    v_z = np.array( [ [ 1e-4, 1e-4, v[0][2]] ])
    return v_x, v_y, v_z


def t_matrix_ax(x_u,y_u,z_u):
    t_matrix_ax = np.array([[x_u[0][0], y_u[0][0], z_u[0][0]],
                         [x_u[0][1], y_u[0][1], z_u[0][1]],
                         [x_u[0][2], y_u[0][2], z_u[0][2]] ])
    return t_matrix_ax

#%% start vectors and angles
x_u= np.array( [[1,0.00001,0.00001]])

y_u = np.array( [[1e-5,1,1e-5]])

z_u = np.array( [[1e-5,1e-5,1]])

alpha, beta, gamma = 0,0,0

#%% initial and final vector and their components

vel_init = np.array ([[1e-3,5,-0.2]])

vel_init_u = v_unitary(vel_init)    #unitary vector

vel_init_u_x, vel_init_u_y, vel_init_u_z = xyz_components(vel_init_u)

#vel_after = np.array( [[1e-3,4.95,-0.3]])

#vel_after_u =v_unitary(vel_after)

v_lift = np.array([ [0.05,0.2,5.0]]) #V_o is the orthogonal lift vector of the capsule
v_lift_u = v_unitary(v_lift)

#vel_after_u_x, vel_after_u_y, vel_after_u_z = xyz_components(vel_after)


#%% starting axis
plt.ion
fig = plt.figure ( 'testing linear transformation')
ax = plt.axes(projection = '3d')

#%% calculation of alpha,beta,gamma after change in velocity vector

for i in range (1,40):
    
    alpha, beta, gamma = 0,0,0
    
    #ax.clear()
    
    vel_after = vel_init + (np.array( [[0,-0.2,-0.2]]))
    
    vel_after_u =v_unitary(vel_after)
    
    vel_after_u_x, vel_after_u_y, vel_after_u_z = xyz_components(vel_after_u)

    vel_init_u = v_unitary(vel_init)    #unitary vector
    
    vel_init_u_x, vel_init_u_y, vel_init_u_z = xyz_components(vel_init_u)
    
    v_lift_u = v_unitary(v_lift)
    
    print ('Angle vel_init,vel_after : {:.2f} degrees'.format(to_deg(find_angle(vel_init,vel_after))))
    
    
    # rotation around the z axis, i.e. in plane xy, i.e. alpha angle. If block to decide if adds or substracts
    proj_xy_init_u = vel_init_u_x + vel_init_u_y
    proj_xy_after_u = vel_after_u_x + vel_after_u_y
    rot_alpha = find_angle(proj_xy_after_u,proj_xy_init_u)
    
    if proj_xy_after_u[0][0] > proj_xy_init_u[0][0]:
        if proj_xy_after_u[0][1]>0 and proj_xy_after_u[0][0]>0:
            rot_alpha = -1 * rot_alpha
        if proj_xy_after_u[0][1]>0 and proj_xy_after_u[0][0]<0:
            rot_alpha = -1 * rot_alpha
    if proj_xy_after_u[0][0] < proj_xy_init_u[0][0]:
        if proj_xy_after_u[0][1]<0 and proj_xy_after_u[0][0]<0 :
            rot_alpha = -1 * rot_alpha
        if proj_xy_after_u[0][1]<0 and proj_xy_after_u[0][0]>0 :
            rot_alpha = -1 * rot_alpha
    
    # rotation around the x axis, i.e. in plane yz, i.e. beta angle
    proj_yz_init_u = vel_init_u_y + vel_init_u_z
    proj_yz_after_u = vel_after_u_y + vel_after_u_z
    rot_beta = find_angle(proj_yz_after_u,proj_yz_init_u)
    print (proj_yz_init_u)
    print (proj_yz_after_u)
    
    if proj_yz_after_u[0][1] > proj_yz_init_u[0][1]:
        if proj_yz_after_u[0][2]>0 and proj_yz_after_u[0][1]>0:
            rot_beta = -1 * rot_beta
        if proj_yz_after_u[0][2]>0 and proj_yz_after_u[0][1]<0:
            rot_beta = -1 * rot_beta
    if proj_yz_after_u[0][1] < proj_yz_init_u[0][1]:
        if proj_yz_after_u[0][2]<0 and proj_yz_after_u[0][1]>0:
            print ('a')
            rot_beta = -1 * rot_beta
        if proj_yz_after_u[0][2]<0 and proj_yz_after_u[0][1]<0:
            rot_beta = -1 * rot_beta
            print ('b')
    
        
    # rotation around the y axis, i.e. in plane xz, i.e. gamma angle   
    proj_xz_init_u = vel_init_u_x + vel_init_u_z
    proj_xz_after_u = vel_after_u_x + vel_after_u_z
    rot_gamma = find_angle(proj_xz_after_u,proj_xz_init_u)
    
    if proj_xz_after_u[0][2] >  proj_xz_init_u[0][2]:
        if proj_xz_after_u[0][0]>0 and proj_xz_after_u[0][2]>0:
            rot_gamma = -1 * rot_gamma
        if proj_xz_after_u[0][0]>0 and proj_xz_after_u[0][2]<0:
            rot_gamma = -1 * rot_gamma
    if proj_xz_after_u[0][2] < proj_xz_init_u[0][2]:
        if proj_xz_after_u[0][0]<0 and proj_xz_after_u[0][2]>0:
            rot_gamma = -1 * rot_gamma
        if proj_xz_after_u[0][0]<0 and proj_xz_after_u[0][2]<0:
            rot_gamma = -1 * rot_gamma
            
    
    '''
    def ax_rotation(v_init_ax1,v_init_ax2,v_after_ax1,v_after_ax2):          #CONTINUA AQUI CUATRO CONDICIONES CUADERNO
        proj_init_ax12 = v_init_ax1 + v_init_ax2
        proj_after_ax12 = v_after_ax1 + v_after_ax2
        rot_angle = find_angle(proj_init_ax12,proj_after_ax12)
    '''   
        
     
    alpha += rot_alpha
    beta += rot_beta
    gamma += rot_gamma
    
    
    print ('degrees alpha {:.3f}  beta{:.3f}  gamma{:.3f}'.
           format(to_deg(alpha), to_deg(beta), to_deg(gamma) ))
    
    #%% successive rotations
    
    #round axis z
    
    z_u_z = z_u
    x_u_z = np.array (  [ [np.cos(alpha), np.sin(alpha), 0] ]) 
    y_u_z = np.array (  [ [-np.sin(alpha), np.cos(alpha), 0] ])
    
    t_matrix_z = t_matrix_ax( x_u_z, y_u_z, z_u_z)
    
    #round axis x
    
    x_u_x = x_u
    y_u_x = np.array ( [ [0, np.cos(beta), np.sin(beta)] ])
    z_u_x = np.array ( [ [0, -np.sin(beta), np.cos(beta)] ])
    
    t_matrix_x = t_matrix_ax( x_u_x, y_u_x, z_u_x)
    
    #round axis y
    y_u_y = y_u
    x_u_y = np.array ( [ [np.cos(gamma), 0, -np.sin(gamma)] ])
    z_u_y = np.array ( [ [np.sin(gamma),0,  np.cos(gamma)] ])
    
    t_matrix_y = t_matrix_ax( x_u_y, y_u_y, z_u_y)
    
    
    #%% all three rotation axis combined
    
    t_matrix_rot = np.matmul( np.matmul(t_matrix_x,t_matrix_z) , t_matrix_y)
    
    t_x = np.array( [t_matrix_rot[:,0]])
    t_y = np.array( [t_matrix_rot[:,1]])
    t_z = np.array( [t_matrix_rot[:,2]])
    #%% calculating effect of velocity vector change in lift vector
    
    v_lift_rotated = np.matmul(t_matrix_rot, v_lift.T).reshape((1,3))
    #find angle of rotation of v_lift_rotated respect to vertical.
    v_lift_r_u = v_unitary(v_lift_rotated)
    v_lift_r_u_x,v_lift_r_u_y, v_lift_r_u_z = xyz_components(v_lift_r_u)
    
    proj_lift_u_zx = v_lift_r_u_x + v_lift_r_u_z
    
    
    
    incl_lift = to_deg( find_angle(proj_lift_u_zx, z_u))
    if v_lift_r_u_x[0][0]<0:
        incl_lift = -1* incl_lift
    
    #alternative formula for lift angle
    incl_lift = to_deg( find_angle (v_lift_r_u, (z_u + vel_after_u)))
    print (incl_lift)
    
    
    
    
    #%%Plotting
    
    #vectors = [(t_x,'blue'), (t_y,'blue'),(t_z,'blue'), (vel_after,'red'), (vel_init,'black'), (v_o_rotated,'green')]
    vectors = [(v_unitary(vel_init), 'green'),(vel_after_u,'red'),
               (v_unitary(v_lift), 'black'),(v_lift_r_u, 'orange'),]
    
    
    
    
    for vv,cc in vectors:
        ax.quiver(0,0,0,vv[0][0],vv[0][1],vv[0][2] , color = cc,  length = 1)
    
    ax.scatter (x_u*4, y_u*4, z_u *4) #points to have a reference
    ax.view_init(10,60)              #change the point of view (angle above x_ais, rotation angle from z_axis)
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    
    v_lift = v_lift_rotated
    vel_init = vel_after
    
    plt.pause(0.2)

#plt.show()





