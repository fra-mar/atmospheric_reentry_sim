#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 23 09:54:32 2021

@author: paco
"""

'''testing linear transformatons, according to 3eyeBlue video series linear algebra
https://www.youtube.com/watch?v=rHLEWRxRGiM

I went crazy with ...transformation_3...so next try,simplified

First i give a vector suposed to be the velocity vector of the capsule.
remeber that the aim of all this is to understand where lands the lift vector when the capsule rotates

then three angles (alpha...) are calculated between unitary axis (x_u...)and the projections of the v vector in the three planes

Then three matrix corresponding to the rotations (lineal transformation) around the three axis are calculated

At last a final transformation matrix is calculted by matrix multiplication of the three transformation matrices.

And the final tranformed vector is calculated as the matrix mult of t_matrix_rot and the vector...
... you want to transform (v_o into v_o_rot)

'''

from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np


#%% lambdas and functions
to_rad = lambda d: np.pi*d / 180
to_deg = lambda r: r*180/np.pi
module = lambda v: np.sqrt( np.sum(v**2))
v_unitary = lambda v: v/module(v)

def find_angle(v1,v2):
    modules_product = module(v1)*module(v2)
    dot_product =  np.dot(v1[0],v2[0])
    '''print (v1,v2)
    print (dot_product)
    print (modules_product)'''
    
    if modules_product > 1e-15 and dot_product >1e-15:
        angle = np.arccos( dot_product / modules_product  )
        print ('hej')
    else:
        angle = 0.0
        print ('hejd√•')
    return angle

def xyz_components(v):
    v_x = np.array( [ [v[0][0], 1e-4,1e-4]])
    v_y = np.array( [ [ 1e-4, v[0][1], 1e-4]] )
    v_z = np.array( [ [ 1e-4, 1e-4, v[0][2]] ])
    return v_x, v_y, v_z

#%% start vectors and angles
x_u= np.array( [[1,0.00001,0.00001]])

y_u = np.array( [[0,1,0]])

z_u = np.array( [[0,0,1]])

alpha, beta, gamma = 0,0,0

#%% initial and final vector and their components

vel_init = np.array ([[1e-5,3.0,-1e-5]])

vel_init_u = v_unitary(vel_init)    #unitary vector

vel_init_x, vel_init_y, vel_init_z = xyz_components(vel_init)  #components
vel_init_u_x, vel_init_u_y, vel_init_u_z = xyz_components(vel_init_u)

vel_after = np.array( [[-0.5,2.8,-1.7]])

vel_after_u =v_unitary(vel_after)

print ('Angle vel_init,vel_after : {:.2f} degrees'.format(to_deg(find_angle(vel_init,vel_after))))

vel_after_x, vel_after_y, vel_after_z = xyz_components(vel_after)

vel_after_u_x, vel_after_u_y, vel_after_u_z = xyz_components(vel_after)

#%% calculation of alpha,beta,gamma after change in velocity vector

'''the second vector (vel_after) makes a change in the original vector (vel_init)
This can be understood as the second vector displacing the x,y,z axis.
The angle each axis is tilted is the difference between the projections of both vectors in the 
corresponding plane. I.e. dif(vel_after_x - vel_init_x) in the plane xy for alpha, and so on.
a correction (if...) is made to understand the direction of the turn (pos counterclockwise)
and neg clockwise
'''

proj_xy_init_u = vel_init_u_x + vel_init_u_y
proj_xy_after_u = vel_after_u_x + vel_after_u_y
rot_alpha = find_angle(proj_xy_after_u,proj_xy_init_u)
if proj_xy_after_u[0][1]-proj_xy_init_u[0][1] < 0:
    rot_alpha = -1 * rot_alpha


proj_yz_init_u = vel_init_u_y + vel_init_u_z
proj_yz_after_u = vel_after_u_y + vel_after_u_z
rot_beta = find_angle(proj_yz_after_u,proj_yz_init_u)
if proj_yz_after_u[0][2]-proj_yz_init_u[0][2] < 0:
    rot_beta = -1 * rot_beta
    
    
proj_xz_init_u = vel_init_u_x + vel_init_u_z
proj_xz_after_u = vel_after_u_x + vel_after_u_z
rot_gamma = find_angle(proj_xz_after_u,proj_xz_init_u)
if proj_xz_after_u[0][0]-proj_xz_init_u[0][0] > 0:
    rot_gamma = -1 * rot_gamma
    
alpha += rot_alpha
beta += rot_beta
gamma += rot_gamma


print ('degrees alpha {:.3f}  beta{:.3f}  gamma{:.3f}'.
       format(to_deg(alpha), to_deg(beta), to_deg(gamma) ))

#%% successive rotations

#round axis z

z_u_z = z_u
x_u_z = np.array (  [ [np.cos(alpha), np.sin(alpha), 0] ]) 
y_u_z = np.array (  [ [-np.sin(alpha), np.cos(alpha), 0] ])

t_matrix_z = np.array([[x_u_z[0][0], y_u_z[0][0], z_u_z[0][0]],
                     [x_u_z[0][1], y_u_z[0][1], z_u_z[0][1]],
                     [x_u_z[0][2], y_u_z[0][2], z_u_z[0][2]] ])

#round axis x

x_u_x = x_u
y_u_x = np.array ( [ [0, np.cos(beta), np.sin(beta)] ])
z_u_x = np.array ( [ [0, -np.sin(beta), np.cos(beta)] ])

t_matrix_x = np.array([[x_u_x[0][0], y_u_x[0][0], z_u_x[0][0]],
                     [x_u_x[0][1], y_u_x[0][1], z_u_x[0][1]],
                     [x_u_x[0][2], y_u_x[0][2], z_u_x[0][2]] ])

#round axis y
y_u_y = y_u
x_u_y = np.array ( [ [np.cos(gamma), 0, -np.sin(gamma)] ])
z_u_y = np.array ( [ [np.sin(gamma),0,  np.cos(gamma)] ])

t_matrix_y = np.array([[x_u_y[0][0], y_u_y[0][0], z_u_y[0][0]],
                     [x_u_y[0][1], y_u_y[0][1], z_u_y[0][1]],
                     [x_u_y[0][2], y_u_y[0][2], z_u_y[0][2]] ])

#%% t_matrix combined

t_matrix_rot = np.matmul( np.matmul(t_matrix_x,t_matrix_z) , t_matrix_y)
#t_matrix_rot = np.matmul(t_matrix_x,t_matrix_y)

t_x = np.array( [t_matrix_rot[:,0]])
t_y = np.array( [t_matrix_rot[:,1]])
t_z = np.array( [t_matrix_rot[:,2]])
#%% plotting

v_o = np.array([ [0.05,0.05,3.0]])

v_o_rotated = np.matmul(t_matrix_rot, v_o.T).reshape((1,3))

#vectors = [(t_x,'blue'), (t_y,'blue'),(t_z,'blue'), (vel_after,'red'), (vel_init,'black'), (v_o_rotated,'green')]
#vectors = [(t_x,'blue'), (t_y,'blue'),(t_z,'blue')]
vectors = [(vel_init_u_x,'black'), (vel_init_u_y,'black'), (vel_init_u_z,'black'),
           (vel_after_u_x,'blue'), (vel_after_u_y,'blue'), (vel_after_u_z,'blue'),
           (vel_init, 'green'),(vel_after,'red'), (v_o, 'black'),(v_o_rotated, 'orange')]


fig = plt.figure ( 'testing linear transformation')
ax = plt.axes(projection = '3d')

for vv,cc in vectors:
    ax.quiver(0,0,0,vv[0][0],vv[0][1],vv[0][2] , color = cc,  length = 1)

ax.scatter (x_u*4, y_u*4, z_u *4) #points to have a reference
ax.view_init(10,10)              #change the point of view (angle above x_ais, rotation angle from z_axis)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()





