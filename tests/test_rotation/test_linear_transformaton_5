#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 23 09:54:32 2021

@author: paco
"""

'''testing linear transformatons, according to 3eyeBlue video series linear algebra
https://www.youtube.com/watch?v=rHLEWRxRGiM

I went crazy with ...transformation_3...so next try,simplified

First i give a vector suposed to be the velocity vector of the capsule.
remeber that the aim of all this is to understand where lands the lift vector when the capsule rotates

then three angles (alpha...) are calculated between unitary axis (x_u...)and the projections of the v vector in the three planes
THIS DOESN'T WORK!!! WHY? WHEN YOU GIVE YOUR VELOCITY VECTOR AS THE ROTATION VECTOR, THEN THE ORIGINAL REFERENCE VECTOR
1,1,1 IS HEAVILY ROTATED, WITH UNREAL RESULTS.
IF YOU TRY JUST THE ANGLES (AROUND LINE 65), IT WORKS FINE.
NEXT TRY, CALCULATING ANGLE MODIFICATION FROM ORIGINAL ANGLES ALPHA, BETA, GAMMA.

Then three matrix corresponding to the rotations (lineal transformation) around the three axis are calculated

At last a final transformation matrix is calculted by matrix multiplication of the three transformation matrices.

And the final tranformed vector is calculated as the matrix mult of t_matrix_rot and the vector...
... you want to transform (v_o into v_o_rot)

'''

from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np

#%% unitary vectors
x_u= np.array( [[1,0,0]])

y_u = np.array( [[0,1,0]])

z_u = np.array( [[0,0,1]])

#%% the new vector and calculation of its components.

v = np.array( [[1,1,1]])

v_u = v/( np.sqrt (np.sum(v**2)) ) # v with module 1

alpha = np.arctan( v_u[0][1] / v_u[0][0] ) #angle between x axis and the new_x, projection of v in the xy plane

beta = np.arctan( v_u[0][2] / v_u[0][1] )  #angle between y axis and the new_y, projection of v in the zy plane

gamma = np.arctan( v_u[0][0] / v_u[0][2] )  #angle between z axis and the new_z, projection of v in the xz plane

#alpha = np.pi/2 -alpha; beta = np.pi/2 - beta; gamma = np.pi/2 - gamma

to_deg = lambda r: r*180/np.pi
print (to_deg(alpha), to_deg(beta), to_deg(gamma) )

#%% successive rotations

#this is to test angles and check the code works

to_rad = lambda d: np.pi*d / 180

alpha = to_rad(0)
beta = to_rad(6)
gamma = to_rad(10)

#round axis z

z_u_z = z_u
x_u_z = np.array (  [ [np.cos(alpha), np.sin(alpha), 0] ]) 
y_u_z = np.array (  [ [-np.sin(alpha), np.cos(alpha), 0] ])

t_matrix_z = np.array([[x_u_z[0][0], y_u_z[0][0], z_u_z[0][0]],
                     [x_u_z[0][1], y_u_z[0][1], z_u_z[0][1]],
                     [x_u_z[0][2], y_u_z[0][2], z_u_z[0][2]] ])

#round axis x

x_u_x = x_u
y_u_x = np.array ( [ [0, np.cos(beta), np.sin(beta)] ])
z_u_x = np.array ( [ [0, -np.sin(beta), np.cos(beta)] ])

t_matrix_x = np.array([[x_u_x[0][0], y_u_x[0][0], z_u_x[0][0]],
                     [x_u_x[0][1], y_u_x[0][1], z_u_x[0][1]],
                     [x_u_x[0][2], y_u_x[0][2], z_u_x[0][2]] ])

#round axis y
y_u_y = y_u
x_u_y = np.array ( [ [np.cos(gamma), 0, -np.sin(gamma)] ])
z_u_y = np.array ( [ [np.sin(gamma),0,  np.cos(gamma)] ])

t_matrix_y = np.array([[x_u_y[0][0], y_u_y[0][0], z_u_y[0][0]],
                     [x_u_y[0][1], y_u_y[0][1], z_u_y[0][1]],
                     [x_u_y[0][2], y_u_y[0][2], z_u_y[0][2]] ])

#%% t_matrix combined

t_matrix_rot = np.matmul( np.matmul(t_matrix_x,t_matrix_z) , t_matrix_y)
#t_matrix_rot = np.matmul(t_matrix_x,t_matrix_y)

t_x = np.array( [t_matrix_rot[:,0]])
t_y = np.array( [t_matrix_rot[:,1]])
t_z = np.array( [t_matrix_rot[:,2]])
#%% plotting

v_o = np.array([ [0.05,0.05,1.]])

v_o_rotated = np.matmul(t_matrix_rot, v_o.T).reshape((1,3))

vectors = [(t_x,'blue'), (t_y,'blue'),(t_z,'blue'), (v,'red'),  (v_o_rotated,'green')]
#vectors = [(t_x,'blue'), (t_y,'blue'),(t_z,'blue')]


fig = plt.figure ( 'testing linear transformation')
ax = plt.axes(projection = '3d')

for vv,cc in vectors:
    ax.scatter(0,0,0, color = 'b')
    ax.quiver(0,0,0,vv[0][0],vv[0][1],vv[0][2] , color = cc,  length = 2)

ax.scatter (x_u*4, y_u*4, z_u *4) #points to have a reference
ax.view_init(10,10)              #change the point of view (angle above x_ais, rotation angle from z_axis)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()





