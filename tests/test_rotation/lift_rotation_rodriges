#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 23 09:54:32 2021

@author: paco
"""

'''So at last I found out that a lift vector can be calculated as cross product of 
vel_init x after (cross) and then cross product again of cross x vel_after.
 To rotate the lift vecto around the velocity vector 
 (let's say vel_after a brilliant formula can be
used -Rodriges formula-)

'''

from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np
import vg


#%% lambdas and functions

module = lambda v: np.sqrt( np.sum(v**2))
v_unitary = lambda v: v/module(v)
def find_angle(v1,v2):
    module = lambda v: np.sqrt( np.sum(v**2))
    modules_product = module(v1)*module(v2)
    dot_product =  np.dot(v1[0],v2[0])
    
    if modules_product > 1e-15:#  and dot_product >1e-15:
        angle = np.arccos( dot_product / modules_product  )
    else:
        angle = 0.0
        print ('oooops')
    angle = np.arccos( dot_product / modules_product  )
    
    cross = np.cross ( v1, v2)
    dot = np.dot (cross[0], np.array( [0.,1.,0.]))
    if dot <0:
        angle = -angle
    
    return np.rad2deg(angle)

#%% start vectors and angles
x_u= np.array( [[1,0.0,0.0]])

y_u = np.array( [[0.,1.,0.]])

z_u = np.array( [[0.,0.,1]])

alpha, beta, gamma = 0,0,0

#%% initial and final vector and their components

def lift_function (vel_init, vel_after,theta):

    vel_init_u = v_unitary(vel_init)    #unitary vector
    
    
    vel_after_u =v_unitary(vel_after)
    '''
    v_lift = np.array([ [1e-3,1e-3,3]]) #V_o is the orthogonal lift vector of the capsule
    '''
    v_side = np.cross(vel_init,vel_after)
    v_lift = np.cross(vel_after,v_side)
    #Rodriges formula
    v_lift_r_a = v_lift * np.cos(theta) + (np.cross(vel_after_u,v_lift)) * np.sin(theta)
    v_lift_r_b = vel_after_u* (np.dot(vel_after_u[0],v_lift[0]))*(1-np.cos(theta))
    
    v_lift_r = v_lift_r_a + v_lift_r_b
    
    incl_lift = find_angle(v_lift,v_lift_r)
    
    
    return v_lift,v_lift_r,incl_lift

#%% Starting plot
fig = plt.figure ( 'testing linear transformation')
ax = plt.axes(projection = '3d')
plt.ion()

    #%% Rodriges rotation formula

ax.clear()



v_lift_r_a = v_lift * np.cos(theta) + (np.cross(vel_after_u,v_lift)) * np.sin(theta)
v_lift_r_b = vel_after_u* (np.dot(vel_after_u[0],v_lift[0]))*(1-np.cos(theta))

v_lift_r = v_lift_r_a + v_lift_r_b
v_lift_r_u = v_unitary ( v_lift_r)
print ('\nInclination lift angle {:.2f}'.format(find_angle(v_lift,v_lift_r)))

#%%Plotting

#vectors = [(t_x,'blue'), (t_y,'blue'),(t_z,'blue'), (vel_after,'red'), (vel_init,'black'), (v_o_rotated,'green')]
vectors = [(v_unitary(vel_init), 'green'),(vel_after_u,'red'),
           (v_unitary(v_lift), 'black'),(v_lift_r_u, 'orange'),]




for vv,cc in vectors:
    ax.quiver(0,0,0,vv[0][0],vv[0][1],vv[0][2] , color = cc,  length = 2)

ax.scatter (x_u*4, y_u*4, z_u *4) #points to have a reference
ax.view_init(10,-110)              #change the point of view (angle above x_ais, rotation angle from z_axis)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')

plt.pause(0.6)


#plt.show()





